%% Verification of MicroSD_controller
% This script generates a mif memory ininitialization file for use with the
% microsd_controller_tester vhdl files associated with the
% microsd_controller component. The script also generates a .bin file for
% use with the unix compare function (cmp()). This is so a dump of the SD
% card in linux can be verified.
%
% A 512 byte mif file for initialization of microsd_controller_tester
% top port ram. This ram is initialized with random 8 bit integer values.
% The mif file takes strings of the hex values. However the bin file must be
% constructed into strict binary. 


% Filename:     	mif_bin_gen_rand.m
% Description:  	The script generates verification files for
%                   microSD_controller
%                   
% Author:			Christopher Casebeer
% Lab:              Dr. Snider
% Department:       Electrical and Computer Engineering
% Institution:      Montana State University
% Support:          This work was supported under NSF award No. DBI-1254309
% Creation Date:	June 2014	


fid = fopen('512byte_rand.mif','w');
fid2 = fopen('512byte_rand.bin','w');

%% The Altera MIF file has a specific format and header.

fprintf(fid,'--MIF data generated by MATLAB\n');
fprintf(fid,'--Date: %s \n\n', date);
fprintf(fid,'WIDTH=8;\n');
fprintf(fid,'DEPTH=512;\n');
fprintf(fid,'ADDRESS_RADIX=HEX;\n');
fprintf(fid,'DATA_RADIX=HEX;\n');
fprintf(fid,'CONTENT BEGIN\n');

%% Construct 512 bytes of data

i = randi([0 255],1,1);
for k = 0:511
%Convert to 8 bit unsigns for the bin file. 
a(k+1) = uint8(i);
%The mif file takes strings representing the hex values.
fprintf(fid,'%x : %x;\n',k,i);

i = randi([0 255],1,1);
       
end
%% 512 bytes * 2048 block (1MB) binary .bin file.
% fwrite constructs a binary file. repmat replicates 512 bytes 2048 times
% for a total of 1MB of data. 


fwrite(fid2,repmat(a,1,2048));
fprintf(fid,'END;');
fclose(fid2);
fclose(fid);

%% Usage
% The .mif file should be supplied to the microSD_controller_tester files
% for initialization of the 2 port ram. The 2 port ram supplies the test
% data microsd_controller writes to the SD card. 
%
% The .bin file should be copied to a linux environment. A dd command
% should be used to dump 2048 blocks off the SD card after the
% microsd_controller_tester file has been compiled and run on the FPGA and
% attached SD card. A USB reader was used to read the microSD card. A
% command “dd if=/dev/sdb of=/home/user/desktop/2048_dd_dump.bin count= 2048”
% can be used for the dump.
%
% After having used dd to dump 1MB or 2048 blocks off the SD card starting
% at address 0 a compare should be done between the dumped data and the
% generated .bin file. This can be accomplished with the unix cmp function.
% A command such as "cmp 2048_dd_dump.bin 512byte_rand.bin" should return
% 0. If so the microsd_controller has written 1MB of the 512 byte random
% data successfully to the attached SD card.
