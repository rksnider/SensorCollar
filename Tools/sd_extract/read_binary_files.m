%Read binary file into Matlab
%Binary files are generated by mex of parse_sdcard_p.cpp

%Reading in the audio time stamps is not on by default.
%The stuctures of the associated arrays are provided. 



int32_files = {'audio_l', 'audio_r', 'accel_stream', 'mag_stream', 'gyro_stream','segment_number'}
file_contents = cell(1);
for k = 1:length(int32_files)

fileID = fopen([int32_files{k} '.bin']);
file_contents{k} = int32(fread(fileID,Inf,'int32'));
fclose(fileID);

end





%   struct status_packet {
%     uint64_t commit;
%     uint64_t compile;
%     uint64_t status_t;
%     uint64_t accel_t;
%     uint64_t gyro_t;
%     uint64_t mag_t;
%     uint64_t temp_t;
%     uint64_t audio_t;
%     uint64_t rtc_t;
%     uint64_t mics_active;
%     uint64_t status_type;
%   };

fileID = fopen( 'status_packets.bin');
status_packets = uint64(fread(fileID,[Inf],'uint64'));
status_packets = vec2mat(status_packets,11);
fclose(fileID);

%   struct tm_packet {
%     int flags;
%     int wnF;
%     int towmsF;
%     int towsubmsF;
%     int accestns;
%     int reset_time_week;
%     int reset_time_ms;
%     int reset_time_ns;
%   };

fileID = fopen( 'tm_packets.bin');
tm_packets = int32(fread(fileID,[Inf],'int32'));
tm_packets = vec2mat(tm_packets,8);
fclose(fileID);

%   
%     struct nav_sol_packet {
% 
%     int itow;
%     int ftow;
%     int weekepoch;
%     int fixtype;
%     int ecefx;
%     int ecefy;
%     int ecefz;
%     int pacc;
%     int posdop;
%     int numsv;
%     int reset_time_week;
%     int reset_time_ms;
%     int reset_time_ns;
%   };

fileID = fopen( 'navsol_packets.bin');
nav_sol_packets = int32(fread(fileID,[Inf],'int32'));
nav_sol_packets = vec2mat(nav_sol_packets,13);
fclose(fileID);

%   struct tim_tp_packet {
%     uint32_t reset_time_week;
%     uint32_t reset_time_ms;
%     uint32_t reset_time_ns;
%     uint32_t gps_time_week;
%     uint32_t gps_time_ms;
%     uint32_t gps_time_ns;
%   };

fileID = fopen( 'tim_tp_packets.bin');
tim_tp_packet = uint32(fread(fileID,[Inf],'uint32'));
tim_tp_packet = vec2mat(tim_tp_packet,6);
fclose(fileID);


%   
%     struct gps_time
%   {
%   uint32_t    week_num;
%   uint32_t    milli_num;
%   uint32_t    nano_num;
%   uint32_t    gps_week_num;
%   uint32_t    gps_milli_num;
%   uint32_t    gps_nano_num;
%   };
% 
% 


%uint32_time_files = {'gyro_times', 'xl_times', 'mag_times', 'status_p_time_mark', 'audio_times'}

%% 
uint32_time_files = {'gyro_times', 'xl_times', 'mag_times', 'status_p_time_mark'}

sample_times = cell(1);
for k = 1:length(uint32_time_files)

fileID = fopen([uint32_time_files{k} '.bin']);
sample_times{k} = uint32(fread(fileID,Inf,'uint32'));
sample_times{k}  = vec2mat(sample_times{k},6);
fclose(fileID);

end
%% 

audio_r = file_contents{2};
mean_audio = double(audio_r) / abs(max(double(audio_r)));
mean_audio = mean_audio-mean(mean_audio);
audiowrite(['Right_Channel.wav'],mean_audio,56250);













