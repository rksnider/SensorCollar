-- -------------------------------------------------------------
--
-- Module: Hd_16
-- Generated by MATLAB(R) 8.3 and the Filter Design HDL Coder 2.9.5.
-- Generated on: 2014-06-10 11:38:59
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: Hd_16
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate        : N/A (normalized frequency)
-- Response           : CIC
-- Specification      : Fp,Ast
-- Multirate Type     : Decimator
-- Decimation Factor  : 64
-- Differential Delay : 1
-- Passband Edge      : 0.1
-- Stopband Atten.    : 60 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Decimator
-- Decimation Factor       : 64
-- Differential Delay      : 1
-- Number of Sections      : 3
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 2)
--
-- Input                   : s2,0
-- Output                  : s16,-4
-- Filter Internals        : Minimum Word Lengths
--   Integrator Section 1  : s20,0
--   Integrator Section 2  : s20,0
--   Integrator Section 3  : s20,0
--   Comb Section 1        : s20,0
--   Comb Section 2        : s19,-1
--   Comb Section 3        : s18,-2
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY Hd_16 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(1 DOWNTO 0); -- sfix2
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_E4
         ce_out                          :   OUT   std_logic  
         );

END Hd_16;


----------------------------------------------------------------
--Module Architecture: Hd_16
----------------------------------------------------------------
ARCHITECTURE rtl OF Hd_16 IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  -- Signals
  SIGNAL cur_count                        : unsigned(5 DOWNTO 0); -- ufix6
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(1 DOWNTO 0); -- sfix2
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(1 DOWNTO 0); -- sfix2
  SIGNAL section_cast1                    : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sum1                             : signed(19 DOWNTO 0); -- sfix20
  SIGNAL section_out1                     : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast                         : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast_1                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_temp                         : signed(20 DOWNTO 0); -- sfix21
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sum2                             : signed(19 DOWNTO 0); -- sfix20
  SIGNAL section_out2                     : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast_2                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast_3                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_temp_1                       : signed(20 DOWNTO 0); -- sfix21
  --   -- Section 3 Signals 
  SIGNAL section_in3                      : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sum3                             : signed(19 DOWNTO 0); -- sfix20
  SIGNAL section_out3                     : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast_4                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_cast_5                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL add_temp_2                       : signed(20 DOWNTO 0); -- sfix21
  --   -- Section 4 Signals 
  SIGNAL section_in4                      : signed(19 DOWNTO 0); -- sfix20
  SIGNAL diff1                            : signed(19 DOWNTO 0); -- sfix20
  SIGNAL section_out4                     : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sub_cast                         : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sub_cast_1                       : signed(19 DOWNTO 0); -- sfix20
  SIGNAL sub_temp                         : signed(20 DOWNTO 0); -- sfix21
  --   -- Section 5 Signals 
  SIGNAL section_in5                      : signed(19 DOWNTO 0); -- sfix20
  SIGNAL section_cast5                    : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL diff2                            : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL section_out5                     : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL sub_cast_2                       : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL sub_cast_3                       : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL sub_temp_1                       : signed(19 DOWNTO 0); -- sfix20_E1
  --   -- Section 6 Signals 
  SIGNAL section_in6                      : signed(18 DOWNTO 0); -- sfix19_E1
  SIGNAL section_cast6                    : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL diff3                            : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL section_out6                     : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL sub_cast_4                       : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL sub_cast_5                       : signed(17 DOWNTO 0); -- sfix18_E2
  SIGNAL sub_temp_2                       : signed(18 DOWNTO 0); -- sfix19_E2
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_E4
  --   
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_E4


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 6);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(63, 6) THEN
          cur_count <= to_unsigned(0, 6);
        ELSE
          cur_count <= cur_count + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_1 <= '1' WHEN cur_count = to_unsigned(1, 6) AND clk_enable = '1' ELSE '0';

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_1;
      
    END IF; 
  END PROCESS ce_output_register;

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 20);

  add_cast <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp <= resize(add_cast, 21) + resize(add_cast_1, 21);
  sum1 <= add_temp(19 DOWNTO 0);

  integrator_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out1 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section1;

  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= section_out1;

  add_cast_2 <= section_in2;
  add_cast_3 <= section_out2;
  add_temp_1 <= resize(add_cast_2, 21) + resize(add_cast_3, 21);
  sum2 <= add_temp_1(19 DOWNTO 0);

  integrator_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out2 <= sum2;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section2;

  --   ------------------ Section # 3 : Integrator ------------------

  section_in3 <= section_out2;

  add_cast_4 <= section_in3;
  add_cast_5 <= section_out3;
  add_temp_2 <= resize(add_cast_4, 21) + resize(add_cast_5, 21);
  sum3 <= add_temp_2(19 DOWNTO 0);

  integrator_delay_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out3 <= sum3;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section3;

  --   ------------------ Section # 4 : Comb ------------------

  section_in4 <= section_out3;

  sub_cast <= section_in4;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 21) - resize(sub_cast_1, 21);
  section_out4 <= sub_temp(19 DOWNTO 0);

  comb_delay_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff1 <= section_in4;
      END IF;
    END IF; 
  END PROCESS comb_delay_section4;

  --   ------------------ Section # 5 : Comb ------------------

  section_in5 <= section_out4;

  section_cast5 <= section_in5(19 DOWNTO 1);

  sub_cast_2 <= section_cast5;
  sub_cast_3 <= diff2;
  sub_temp_1 <= resize(sub_cast_2, 20) - resize(sub_cast_3, 20);
  section_out5 <= sub_temp_1(18 DOWNTO 0);

  comb_delay_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff2 <= section_cast5;
      END IF;
    END IF; 
  END PROCESS comb_delay_section5;

  --   ------------------ Section # 6 : Comb ------------------

  section_in6 <= section_out5;

  section_cast6 <= section_in6(18 DOWNTO 1);

  sub_cast_4 <= section_cast6;
  sub_cast_5 <= diff3;
  sub_temp_2 <= resize(sub_cast_4, 19) - resize(sub_cast_5, 19);
  section_out6 <= sub_temp_2(17 DOWNTO 0);

  comb_delay_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff3 <= section_cast6;
      END IF;
    END IF; 
  END PROCESS comb_delay_section6;

  output_typeconvert <= section_out6(17 DOWNTO 2);

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
